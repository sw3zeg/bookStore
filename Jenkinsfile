pipeline {
    agent any

    stages {
        
        stage('Build BookStore App') {
            steps {
                sh 'docker build -t bookstore-app .'
            }
        }

        stage('Run BookStore API') {
            steps {
                sh 'docker-compose up -d --build'
            }
        }

        stage('Wait for API to be ready') {
            steps {
                script {
                    sh '''
                    echo "‚è≥ –ñ–¥—ë–º —Å—Ç–∞—Ä—Ç–∞ API –Ω–∞ http://localhost:8080/api/books..."
                    for i in {1..30}; do
                      if curl -s http://localhost:8080/api/books > /dev/null; then
                        echo "‚úÖ API –≥–æ—Ç–æ–≤!"
                        exit 0
                      fi
                      sleep 1
                    done
                    echo "‚ùå API –Ω–µ –æ—Ç–≤–µ—Ç–∏–ª –∑–∞ 30 —Å–µ–∫—É–Ω–¥"
                    exit 1
                    '''
                }
            }
        }
        
        stage('Run k6 test') {
            steps {
                sh 'k6 run ./k6/script.js --summary-export=summary.json'
            }
        }

        stage('Show Summary') {
            steps {
                script {
                    def summary = readJSON file: 'summary.json'
        
                    echo "üß™ –ó–∞–ø—Ä–æ—Å–æ–≤ –≤—Å–µ–≥–æ: ${summary.metrics.http_reqs.count}"
                    echo "‚úÖ –£—Å–ø–µ—à–Ω—ã—Ö —á–µ–∫–æ–≤: ${summary.metrics.checks.passes}"
                    echo "‚ùå –ü—Ä–æ–≤–∞–ª–µ–Ω–Ω—ã—Ö —á–µ–∫–æ–≤: ${summary.metrics.checks.fails}"
                    echo "‚è± –°—Ä–µ–¥–Ω—è—è –∑–∞–¥–µ—Ä–∂–∫–∞: ${summary.metrics.http_req_duration.avg} –º—Å"
                    echo "üìà 95-–π –ø—Ä–æ—Ü–µ–Ω—Ç–∏–ª—å –∑–∞–¥–µ—Ä–∂–∫–∏: ${summary.metrics.http_req_duration['p(95)']} –º—Å"

                    def dataReceivedBytes = summary.metrics.data_received?.total ?: 0
                    def dataSentBytes     = summary.metrics.data_sent?.total ?: 0
                    echo "üì• –ü–æ–ª—É—á–µ–Ω–æ –¥–∞–Ω–Ω—ã—Ö: ${String.format('%.2f', dataReceivedBytes / 1024 / 1024)} MB"
                    echo "üì§ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –¥–∞–Ω–Ω—ã—Ö: ${String.format('%.2f', dataSentBytes / 1024 / 1024)} MB"
                }
            }
        }
    }

    post {
    always {
        script {
            def summary = readJSON file: 'summary.json'
            def totalReqs = summary.metrics.http_reqs.count
            def successChecks = summary.metrics.checks.passes
            def failedChecks = summary.metrics.checks.fails
            def avgLatency = summary.metrics.http_req_duration.avg
            def latency95 = summary.metrics.http_req_duration['p(95)']
            
            def msg = """
                üìä *–†–µ–∑—É–ª—å—Ç–∞—Ç—ã k6-—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è*:
                üß™ –ó–∞–ø—Ä–æ—Å–æ–≤: *${totalReqs}*
                ‚úÖ –£—Å–ø–µ—à–Ω—ã—Ö —á–µ–∫–æ–≤: *${successChecks}*
                ‚ùå –ü—Ä–æ–≤–∞–ª–µ–Ω–Ω—ã—Ö —á–µ–∫–æ–≤: *${failedChecks}*
                ‚è± –°—Ä–µ–¥–Ω—è—è –∑–∞–¥–µ—Ä–∂–∫–∞: *${avgLatency} –º—Å*
                üìà 95-–π –ø—Ä–æ—Ü–µ–Ω—Ç–∏–ª—å: *${latency95} –º—Å*
                """

            def BOT_TOKEN = '8060387975:AAGTxAHHqHZo7LKpD4z7aLKx7LEZSngh8k8'
            def CHAT_ID = '958007638'

            sh """
            curl -s -X POST "https://api.telegram.org/bot${BOT_TOKEN}/sendMessage" \\
              -d chat_id=${CHAT_ID} \\
              -d parse_mode=Markdown \\
              -d text="\$(echo '${msg}' | sed 's/"/\\"/g')"
            """
        }
    }
}

    post1 {
        always {
            archiveArtifacts artifacts: 'summary.json', fingerprint: true
        }
    }
}
