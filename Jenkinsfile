pipeline {
    agent any

    stages {
        
        stage('Build BookStore App') {
            steps {
                sh 'docker build -t bookstore-app .'
            }
        }

        stage('Run BookStore API') {
            steps {
                sh 'docker-compose up -d --build'
            }
        }
        
        stage('Run k6 test') {
            steps {
                sh 'k6 run ./k6/script.js --summary-export=summary.json'
            }
        }

        stage('Show Summary') {
            steps {
                script {
                    def summary = readJSON file: 'summary.json'
        
                    echo "üß™ –ó–∞–ø—Ä–æ—Å–æ–≤ –≤—Å–µ–≥–æ: ${summary.metrics.http_reqs.count}"
                    echo "‚úÖ –£—Å–ø–µ—à–Ω—ã—Ö —á–µ–∫–æ–≤: ${summary.metrics.checks.passes}"
                    echo "‚ùå –ü—Ä–æ–≤–∞–ª–µ–Ω–Ω—ã—Ö —á–µ–∫–æ–≤: ${summary.metrics.checks.fails}"
                    echo "‚è± –°—Ä–µ–¥–Ω—è—è –∑–∞–¥–µ—Ä–∂–∫–∞: ${summary.metrics.http_req_duration.avg} –º—Å"
                    echo "üìà 95-–π –ø—Ä–æ—Ü–µ–Ω—Ç–∏–ª—å –∑–∞–¥–µ—Ä–∂–∫–∏: ${summary.metrics.http_req_duration['p(95)']} –º—Å"

                    def dataReceivedBytes = summary.metrics.data_received?.total ?: 0
                    def dataSentBytes     = summary.metrics.data_sent?.total ?: 0
                    echo "üì• –ü–æ–ª—É—á–µ–Ω–æ –¥–∞–Ω–Ω—ã—Ö: ${String.format('%.2f', dataReceivedBytes / 1024 / 1024)} MB"
                    echo "üì§ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –¥–∞–Ω–Ω—ã—Ö: ${String.format('%.2f', dataSentBytes / 1024 / 1024)} MB"
                }
            }
        }
    }

    post {
        always {
            archiveArtifacts artifacts: 'summary.json', fingerprint: true
        }
    }
}
